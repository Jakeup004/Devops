export declare const jacocoGradleSingleModule = "\nallprojects {\n    repositories {\n        mavenCentral()\n    }\n\n    apply plugin: 'jacoco'\n}\n\ndef jacocoExcludes = ['**/R.class','**/R$.class']\ndef jacocoIncludes = ['**/*$ViewInjector.class','**/*$ViewBinder.class']\n\njacocoTestReport {\n    doFirst {\n        fileCollectionAssign fileTree(dir: \"some/folder/with/classes\").exclude(jacocoExcludes).include(jacocoIncludes)\n    }\n\n    reports {\n        html.enabled = true\n        xml.enabled = true\n        xml.destination file(\"report/dir/summary.xml\")\n        html.destination file(\"report/dir\")\n    }\n}\n\ntest {\n    finalizedBy jacocoTestReport\n    jacoco {\n        destinationFile = file(\"report/dir/jacoco.exec\")\n    }\n}";
export declare const jacocoGradleMultiModule = "\nallprojects {\n    repositories {\n        mavenCentral()\n    }\n\n    apply plugin: 'jacoco'\n}\n\ndef jacocoExcludes = ['**/R.class','**/R$.class']\ndef jacocoIncludes = ['**/*$ViewInjector.class','**/*$ViewBinder.class']\n\nsubprojects {\n    jacocoTestReport {\n        doFirst {\n            fileCollectionAssign fileTree(dir: \"some/folder/with/classes\").exclude(jacocoExcludes).include(jacocoIncludes)\n        }\n\n        reports {\n            html.enabled = true\n            html.destination file(\"${buildDir}/jacocoHtml\")\n            xml.enabled = true\n            xml.destination file(\"${buildDir}/summary.xml\")\n        }\n    }\n    test {\n        jacoco {\n            destinationFile = file(\"report/dir/jacoco.exec\")\n        }\n    }\n}\n\ntask jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {\n    dependsOn = subprojects.test\n    fileCollectionAssign files(subprojects.jacocoTestReport.executionData)\n    fileCollectionAssign files(subprojects.sourceSets.main.allSource.srcDirs)\n    fileCollectionAssign files()\n\n    doFirst {\n        subprojects.each {\n            if (new File(\"${it.sourceSets.main.output.classesDirs}\").exists()) {\n                logger.info(\"Class directory exists in sub project: ${it.name}\")\n                logger.info(\"Adding class files ${it.sourceSets.main.output.classesDirs}\")\n                classDirectories += fileTree(dir: \"${it.sourceSets.main.output.classesDirs}\", includes: jacocoIncludes, excludes: jacocoExcludes)\n            } else {\n                logger.error(\"Class directory does not exist in sub project: ${it.name}\")\n            }\n        }\n    }\n\n    reports {\n        html.enabled = true\n        xml.enabled = true\n        xml.destination file(\"report/dir/summary.xml\")\n        html.destination file(\"report/dir/\")\n    }\n}";
export declare const coberturaGradleSingleModule = "\nallprojects {\n    repositories {\n        mavenCentral()\n    }\n    apply plugin: 'net.saliman.cobertura'\n\n    dependencies {\n        testCompile 'org.slf4j:slf4j-api:1.7.12'\n    }\n\n    cobertura.coverageIncludes = ['**/*$ViewInjector.class','**/*$ViewBinder.class']\n    cobertura.coverageExcludes = ['**/R.class','**/R$.class']\n}\n\ncobertura {\n    coverageDirs = [\"some/folder/with/classes\"]\n    coverageSourceDirs = source/dir\n    coverageReportDir = new File('report/dir')\n    coverageFormats = ['xml', 'html']\n}";
export declare const coberturaGradleSingleModuleWithNotSpecifiedSourceDir = "\nallprojects {\n    repositories {\n        mavenCentral()\n    }\n    apply plugin: 'net.saliman.cobertura'\n\n    dependencies {\n        testCompile 'org.slf4j:slf4j-api:1.7.12'\n    }\n\n    cobertura.coverageIncludes = ['**/*$ViewInjector.class','**/*$ViewBinder.class']\n    cobertura.coverageExcludes = ['**/R.class','**/R$.class']\n}\n\ncobertura {\n    coverageDirs = [\"some/folder/with/classes\"]\n    coverageSourceDirs = project.sourceSets.main.java.srcDirs\n    coverageReportDir = new File('report/dir')\n    coverageFormats = ['xml', 'html']\n}";
export declare const coberturaGradleSingleModuleWithNotSpecifiedClassDir = "\nallprojects {\n    repositories {\n        mavenCentral()\n    }\n    apply plugin: 'net.saliman.cobertura'\n\n    dependencies {\n        testCompile 'org.slf4j:slf4j-api:1.7.12'\n    }\n\n    cobertura.coverageIncludes = ['**/*$ViewInjector.class','**/*$ViewBinder.class']\n    cobertura.coverageExcludes = ['**/R.class','**/R$.class']\n}\n\ncobertura {\n    coverageDirs = [\"${project.sourceSets.main.output.classesDirs}\"]\n    coverageSourceDirs = source/dir\n    coverageReportDir = new File('report/dir')\n    coverageFormats = ['xml', 'html']\n}";
export declare const coberturaGradleMultiModule = "\nallprojects {\n    repositories {\n        mavenCentral()\n    }\n    apply plugin: 'net.saliman.cobertura'\n\n    dependencies {\n        testCompile 'org.slf4j:slf4j-api:1.7.12'\n    }\n\n    cobertura.coverageIncludes = ['**/*$ViewInjector.class','**/*$ViewBinder.class']\n    cobertura.coverageExcludes = ['**/R.class','**/R$.class']\n}\n\ntest {\n    dependsOn = subprojects.test\n}\n\ncobertura {\n    coverageSourceDirs = []\n        coverageDirs = [\"some/folder/with/classes\"]\n    coverageDirs = [\"source/dir\"]\n    coverageFormats = [ 'xml', 'html' ]\n    coverageMergeDatafiles = subprojects.collect { new File(it.projectDir, '/build/cobertura/cobertura.ser') }\n    coverageReportDir = new File('report/dir')\n}";
export declare const coberturaGradleMultiModuleWithNotSpecifiedSourceDir = "\nallprojects {\n    repositories {\n        mavenCentral()\n    }\n    apply plugin: 'net.saliman.cobertura'\n\n    dependencies {\n        testCompile 'org.slf4j:slf4j-api:1.7.12'\n    }\n\n    cobertura.coverageIncludes = ['**/*$ViewInjector.class','**/*$ViewBinder.class']\n    cobertura.coverageExcludes = ['**/R.class','**/R$.class']\n}\n\ntest {\n    dependsOn = subprojects.test\n}\n\ncobertura {\n    coverageSourceDirs = []\n        coverageDirs = [\"some/folder/with/classes\"]\n    rootProject.subprojects.each {\n        coverageSourceDirs += it.sourceSets.main.java.srcDirs\n    }\n    coverageFormats = [ 'xml', 'html' ]\n    coverageMergeDatafiles = subprojects.collect { new File(it.projectDir, '/build/cobertura/cobertura.ser') }\n    coverageReportDir = new File('report/dir')\n}";
export declare const coberturaGradleMultiModuleWithNotSpecifiedClassDir = "\nallprojects {\n    repositories {\n        mavenCentral()\n    }\n    apply plugin: 'net.saliman.cobertura'\n\n    dependencies {\n        testCompile 'org.slf4j:slf4j-api:1.7.12'\n    }\n\n    cobertura.coverageIncludes = ['**/*$ViewInjector.class','**/*$ViewBinder.class']\n    cobertura.coverageExcludes = ['**/R.class','**/R$.class']\n}\n\ntest {\n    dependsOn = subprojects.test\n}\n\ncobertura {\n    coverageSourceDirs = []\n    rootProject.subprojects.each {\n        coverageDirs << file(\"${it.sourceSets.main.output.classesDirs}\")\n    }\n    coverageDirs = [\"source/dir\"]\n    coverageFormats = [ 'xml', 'html' ]\n    coverageMergeDatafiles = subprojects.collect { new File(it.projectDir, '/build/cobertura/cobertura.ser') }\n    coverageReportDir = new File('report/dir')\n}";
export declare const jacocoMavenSingleProject: {
    groupId: string;
    artifactId: string;
    version: string;
    configuration: {
        includes: {
            include: string[];
        }[];
        excludes: {
            exclude: string[];
        }[];
    };
    executions: {
        execution: ({
            configuration: {
                includes: {
                    include: string;
                }[];
            };
            id: string;
            goals: {
                goal: string;
            };
            phase?: undefined;
        } | {
            id: string;
            goals: {
                goal: string;
            };
            phase: string;
            configuration?: undefined;
        })[];
    };
};
export declare const jacocoMavenMultiProject = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n            <modelVersion>4.0.0</modelVersion>\n            <groupId>some.group.plugins</groupId>\n            <artifactId>report-artifact-id</artifactId>\n            <version>1.0-SNAPSHOT</version>\n            <packaging>pom</packaging>\n            <modules><module name=\"module\"></module></modules>\n            <parentData></parentData>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.jacoco</groupId>\n                        <artifactId>jacoco-maven-plugin</artifactId>\n                        <version>0.8.11</version>\n                        <executions>\n                            <execution>\n                                <id>jacoco-report-aggregate</id>\n                                <phase>verify</phase>\n                                <goals>\n                                    <goal>report-aggregate</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n        </project>";
export declare const coberturaMavenEnableConfiguration: string;
export declare const jacocoAntReportConfiguration: string;
export declare const jacocoAntCoverageEnableConfiguration: {
    $: {
        destfile: string;
        'xmlns:jacoco': string;
    };
};
export declare const coberturaAntReportConfiguration: string;
export declare const coberturaAntInstrumentedClassesConfiguration: string;
export declare const coberturaAntPropertiesConfiguration: string;
export declare const sortedStringArray: string[];
export declare const objectWithAddedProperty: {
    firstProperty: string;
    secondProperty: string;
    someProperty: number;
};
export declare const objectWithAddedPropertyIntoArray: {
    firstProperty: string;
    secondProperty: string;
    someProperty: number[];
};
export declare const arrayWithAddedProperty: ({
    firstProperty: string;
    secondProperty: string;
    someProperty?: undefined;
} | {
    firstProperty: string;
    secondProperty?: undefined;
    someProperty?: undefined;
} | {
    someProperty: number;
    firstProperty?: undefined;
    secondProperty?: undefined;
})[];
export declare const arrayWithAppendedProperty: ({
    firstProperty: string;
    someProperty?: undefined;
} | {
    firstProperty: string;
    someProperty: number[];
})[];
